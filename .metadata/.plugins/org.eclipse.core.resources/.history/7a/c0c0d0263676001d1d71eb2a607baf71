/*
 * controller.c
 *
 *  Created on: 7 dic. 2022
 *      Author: ayala
 */
#include <stdio.h>
#include <stdlib.h>
#include "utn.h"
#include "post.h"
#include "LinkedList.h"
#include "parser.h"
#include "string.h"
#include <unistd.h>
#include <time.h>
int controller_cargarPostsDesdeTexto(char* path , LinkedList* pArrayListPost)
{
	int returnAux = 0;

	if(path != NULL && pArrayListPost != NULL){

		FILE* f = NULL;
		f = fopen(path, "r");
		if(f != NULL){
			returnAux = parser_postFromText(f, pArrayListPost);
		}
		fclose(f);
	}else{
		printf("Error\n");
	}

    return returnAux;
}

int controller_listarPost(LinkedList* pArrayListJugador,int pos){
	int retorno=0;
	int anchoColumnasTexto=-20;
	int anchoColumnasNumero=-20;

	if(pArrayListJugador != NULL){
		int TAM= ll_len(pArrayListJugador);
		if(TAM >= 0){
			/*	int id;
	char user[30];
	int likes;
	int dislikes;
	int followers;*/
			int id;
			char* user /*= NULL*/;
			int likes;
			int dislikes /*= NULL*/;
			int followers;
			Post* postAListar;

			postAListar = ll_get(pArrayListJugador, pos);
			post_getUser(postAListar,&user);
			post_getId(postAListar,&id);
			post_getLikes(postAListar,&likes);
			post_getDislikes(postAListar,&dislikes);
			post_getFollowers(postAListar,&followers);


			printf("| %*d| %*d| %*s| %*d| %*d| %*d| \n"
			,anchoColumnasNumero ,(pos+1),anchoColumnasNumero,id,
			anchoColumnasTexto,user,anchoColumnasNumero,likes,
			anchoColumnasTexto,dislikes,anchoColumnasTexto,followers);

		}

	}
	return retorno;
}

int controller_listarPosts(LinkedList* pArrayListJugador)
{
	int retorno = 0;
	int anchoColumnasTexto=-20;
	int anchoColumnasNumero=-20;

	if(pArrayListJugador != NULL){
		int largo = ll_len(pArrayListJugador);
		if(largo >= 0 ){
			printf("| %*s| %*s| %*s| %*s| %*s| %*s|\n"
			,anchoColumnasNumero, "#",anchoColumnasNumero,"ID",anchoColumnasTexto
			,"User",anchoColumnasNumero,"Likes",anchoColumnasTexto,"Dislikes",anchoColumnasTexto,"Followers");
			for(int i = 0; i < largo; i++){
				controller_listarPost(pArrayListJugador,i);
			}
		}else{
			printf("No posts para mostrar.\n");
		}

		retorno = 1;
	}

    return retorno;
}

int map (LinkedList* list){
	srand(time(NULL));
	int retorno=0;
	int TAM=ll_len(list);
	int aleatorioLikes;//= 600 + rand() % (5001-600) ;
	int aleatorioDislikes;//= 300 + rand() % (3500-300);
	int aleatorioFollowers;//= 10000 + rand() % (20000 - 10000);
	for(int i=0;i < TAM; i++){
		Post* postAModificar=ll_get(list,i);
		aleatorioLikes= 600 + rand() % (5001-i);
		aleatorioDislikes= 300 + rand() % (3500-i);
		aleatorioFollowers= 10000 + rand() % (20000 - i);

		post_setLikes(postAModificar,aleatorioLikes);
		post_setDislikes(postAModificar,aleatorioDislikes);
		post_setFollowers(postAModificar,aleatorioFollowers);

	}
	return retorno;
}

int guardarMejoresPosteos(LinkedList* list,char* path){
		int returnAux = 0;
		if(path != NULL && list != NULL){
			remove(path);
			FILE* f = NULL;
			f = fopen(path, "w");

			Post* postAux;
			/*	int id;
	char user[30];
	int likes;
	int dislikes;
	int followers;*/
			int id;
			char* user = (char*)malloc(sizeof(char)*30);
			int likes;
			int disLikes;
			int followers;
			char idStr[10];
			char disLikesStr[10];
			char likesStr[10];
			char followersStr[10];

			fprintf(f, "%s,%s,%s,%s,%s\n", "Id", "User", "Likes", "Dislikes","Followers");
			int TAM = ll_len(list);
			for(int i = 0; i < TAM; i++){
				postAux = ll_get(list, i);
				post_getId(postAux, &id);
				post_getLikes(postAux, &likes);
				post_getDislikes(postAux, &disLikes);
				post_getFollowers(postAux, &followers);
				post_getUser(postAux, &user);
				if(likes >= 4000){
					sprintf(idStr, "%d", id);

					sprintf(disLikesStr, "%d",disLikes);

					sprintf(likesStr, "%d", likes);

					sprintf(followersStr, "%d", followers);

					fprintf(f, "%s,%s,%s,%s,%s\n", idStr, user, likesStr, disLikesStr,followersStr);
					//fprintf(f, "%d,%s,%s,%s,%s\n", id, user, likesStr, disLikesStr,followersStr);
				}
			}

			fclose(f);
			free(user);
			returnAux = 1;
		}

	    return returnAux;
	}

int guardarMasHateados(LinkedList* list,char* path){
	int returnAux = 0;
	if(path != NULL && list != NULL){
		remove(path);
		FILE* f = NULL;
		f = fopen(path, "w");

		Post* postAux;

		int id;
		char* user = (char*)malloc(sizeof(char)*30);
		int likes;
		int disLikes;
		int followers;
		char idStr[10];
		char disLikesStr[10];
		char likesStr[10];
		char followersStr[10];

		fprintf(f, "%s,%s,%s,%s,%s\n", "Id", "User", "Likes", "Dislikes","Followers");
		int TAM = ll_len(list);
		for(int i = 0; i < TAM; i++){
			postAux = ll_get(list, i);
			post_getId(postAux, &id);
			post_getLikes(postAux, &likes);
			post_getDislikes(postAux, &disLikes);
			post_getFollowers(postAux, &followers);
			post_getUser(postAux, &user);
			if(disLikes > likes){
				sprintf(idStr, "%d", id);

				sprintf(disLikesStr, "%d",disLikes);

				sprintf(likesStr, "%d", likes);

				sprintf(followersStr, "%d", followers);

				fprintf(f, "%s,%s,%s,%s,%s\n", idStr, user, likesStr, disLikesStr,followersStr);

			}
		}

		fclose(f);
		free(user);
		returnAux = 1;
	}

	return returnAux;
}

int postMasPopular(LinkedList* list,char* path){
	int returnAux = 0;
	if(path != NULL && list != NULL){
		remove(path);
		FILE* f = NULL;
		f = fopen(path, "w");

		Post* postAux;
		Post* postMasLikeado;
		int id;
		char* user = (char*)malloc(sizeof(char)*30);
		int likes;
		int disLikes;
		int followers;
		char idStr[10];
		char disLikesStr[10];
		char likesStr[10];
		char followersStr[10];
		int masLikeado=0;

		fprintf(f, "%s,%s,%s,%s,%s\n", "Id", "User", "Likes", "Dislikes","Followers");
		int TAM = ll_len(list);
		for(int i = 0; i < TAM; i++){
			postAux = ll_get(list, i);
			post_getId(postAux, &id);
			post_getLikes(postAux, &likes);
			post_getDislikes(postAux, &disLikes);
			post_getFollowers(postAux, &followers);
			post_getUser(postAux, &user);

			if(likes > masLikeado){
				masLikeado = likes;
			}


			}

			fclose(f);
			free(user);
			returnAux = 1;
		}

		return returnAux;
}
